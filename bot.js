//import TelegramBot from 'node-telegram-bot-api';
//import Imap from 'imap';
//import { simpleParser } from 'mailparser';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
const mailboxes = {
    mailbox1: {
        name: "airstosand@mail.ru",
        email: process.env.MAIL_RU_EMAIL_1,
        password: process.env.MAIL_RU_PASSWORD_1,
        emoji: 'üîµ'  // –°–∏–Ω–∏–π –∫—Ä—É–≥
    },
    mailbox2: {
        name: "aristoss@inbox.ru",
        email: process.env.MAIL_RU_EMAIL_2,
        password: process.env.MAIL_RU_PASSWORD_2,
        emoji: 'üü¢'  // –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
    }
};

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
const botToken = process.env.TELEGRAM_BOT_TOKEN;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    process.exit(1);
}
for (const key in mailboxes) {
    const mailbox = mailboxes[key];
    if (!mailbox.email || !mailbox.password) {
        console.error(`–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ ${mailbox.name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`);
        process.exit(1);
    }
}

const bot = new TelegramBot(botToken, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
async function checkUnreadEmailsMailRu(chatId, email, password, mailboxName, mailboxEmoji) {
    const imap = new Imap({
        user: email,
        password: password,
        host: 'imap.mail.ru',
        port: 993,
        tls: true,
    });

    imap.once('ready', () => {
        imap.openBox('INBOX', true, (err, box) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞:', err);
                bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ ${mailboxName}.`);
                imap.end();
                return;
            }

            imap.search(['UNSEEN'], (err, results) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º:', err);
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º –≤ ${mailboxName}.`);
                    imap.end();
                    return;
                }

                if (results.length === 0) {
                    bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ ${mailboxName}.`);
                    imap.end();
                    return;
                }

                bot.sendMessage(chatId, `–£ –≤–∞—Å ${results.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailboxName}.`);

                const f = imap.fetch(results, { bodies: '', struct: true, uid: true });

                f.on('message', (msg, seqno) => {
                    let uid;
                    msg.on('attributes', (attrs) => {
                        uid = attrs.uid; // –ü–æ–ª—É—á–∞–µ–º UID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    });

                    msg.on('body', (stream, info) => {
                        simpleParser(stream, {}, (err, mail) => {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞:', err);
                                return;
                            }

                            const deleteButton = {
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', callback_data: `delete_${mailboxName}_${uid}` }]
                                    ]
                                }
                            };

                            bot.sendMessage(
                                chatId,
                                `${mailboxEmoji} **–û—Ç:** ${mail.from.text}\n**–¢–µ–º–∞:** ${mail.subject}\n**–î–∞—Ç–∞:** ${mail.date}`,
                                deleteButton
                            );
                        });
                    });
                });

                f.once('error', (err) => {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º:', err);
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º –≤ ${mailboxName}.`);
                    imap.end();
                });

                f.once('end', () => {
                    imap.end();
                });
            });
        });
    });

    imap.once('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É ${mailboxName}.`);
    });

    imap.connect();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å–µ–º
async function deleteEmail(chatId, email, password, mailboxName, uid) {
    const imap = new Imap({
        user: email,
        password: password,
        host: 'imap.mail.ru',
        port: 993,
        tls: true,
    });

    imap.once('ready', () => {
        imap.openBox('INBOX', false, (err, box) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞:', err);
                bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ ${mailboxName} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞.`);
                imap.end();
                return;
            }

            imap.addFlags([uid], '\\Deleted', (err) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –≤ ${mailboxName}.`);
                    imap.end();
                    return;
                }

                imap.expunge((err) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞:', err);
                        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –≤ ${mailboxName}.`);
                        imap.end();
                        return;
                    }

                    bot.sendMessage(chatId, `–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ ${mailboxName}.`);
                    imap.end();
                });
            });
        });
    });

    imap.once('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è ${mailboxName}.`);
    });

    imap.connect();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    const mailboxKeyboard = {
        reply_markup: {
            inline_keyboard: Object.keys(mailboxes).map(key => [
                { text: `${mailboxes[key].emoji} ${mailboxes[key].name}`, callback_data: `check_${key}` }
            ])
        }
    };

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', mailboxKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('check_')) {
        const mailboxKey = data.split('_')[1];
        const selectedMailbox = mailboxes[mailboxKey];
        if (!selectedMailbox) {
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            return;
        }
        await checkUnreadEmailsMailRu(chatId, selectedMailbox.email, selectedMailbox.password, selectedMailbox.name, selectedMailbox.emoji);
        await bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('delete_')) {
        const [, mailboxName, uid] = data.split('_');
        const selectedMailbox = Object.values(mailboxes).find(mailbox => mailbox.name === mailboxName);
        if (!selectedMailbox) {
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            return;
        }
        await deleteEmail(chatId, selectedMailbox.email, selectedMailbox.password, selectedMailbox.name, uid);
        await bot.answerCallbackQuery(query.id);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞');
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

